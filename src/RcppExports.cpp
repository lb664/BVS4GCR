// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_check_chordal
List cpp_check_chordal(NumericMatrix g, NumericVector capU, int p, int chordal, NumericVector order);
RcppExport SEXP _BVS4GCR_cpp_check_chordal(SEXP gSEXP, SEXP capUSEXP, SEXP pSEXP, SEXP chordalSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type g(gSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type capU(capUSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type chordal(chordalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type order(orderSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_check_chordal(g, capU, p, chordal, order));
    return rcpp_result_gen;
END_RCPP
}
// cpp_find_clique_containing_zo
int cpp_find_clique_containing_zo(int a, NumericMatrix cliques);
RcppExport SEXP _BVS4GCR_cpp_find_clique_containing_zo(SEXP aSEXP, SEXP cliquesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cliques(cliquesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_find_clique_containing_zo(a, cliques));
    return rcpp_result_gen;
END_RCPP
}
// find_and_replace
arma::vec find_and_replace(arma::vec A, double find_val, double replace_val);
RcppExport SEXP _BVS4GCR_find_and_replace(SEXP ASEXP, SEXP find_valSEXP, SEXP replace_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type find_val(find_valSEXP);
    Rcpp::traits::input_parameter< double >::type replace_val(replace_valSEXP);
    rcpp_result_gen = Rcpp::wrap(find_and_replace(A, find_val, replace_val));
    return rcpp_result_gen;
END_RCPP
}
// cpp_reachability_graph
arma::mat cpp_reachability_graph(arma::mat g);
RcppExport SEXP _BVS4GCR_cpp_reachability_graph(SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_reachability_graph(g));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ripcliques_to_jtree_zo
NumericVector cpp_ripcliques_to_jtree_zo(Function print, NumericMatrix cliques, NumericMatrix jtree, int p, int num_cliques);
RcppExport SEXP _BVS4GCR_cpp_ripcliques_to_jtree_zo(SEXP printSEXP, SEXP cliquesSEXP, SEXP jtreeSEXP, SEXP pSEXP, SEXP num_cliquesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Function >::type print(printSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cliques(cliquesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type jtree(jtreeSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type num_cliques(num_cliquesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ripcliques_to_jtree_zo(print, cliques, jtree, p, num_cliques));
    return rcpp_result_gen;
END_RCPP
}
// cpp_setdiff_zo
NumericVector cpp_setdiff_zo(NumericVector a, NumericVector b);
RcppExport SEXP _BVS4GCR_cpp_setdiff_zo(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_setdiff_zo(a, b));
    return rcpp_result_gen;
END_RCPP
}
// cpp_union_zo
NumericVector cpp_union_zo(NumericVector b);
RcppExport SEXP _BVS4GCR_cpp_union_zo(SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_union_zo(b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BVS4GCR_cpp_check_chordal", (DL_FUNC) &_BVS4GCR_cpp_check_chordal, 5},
    {"_BVS4GCR_cpp_find_clique_containing_zo", (DL_FUNC) &_BVS4GCR_cpp_find_clique_containing_zo, 2},
    {"_BVS4GCR_find_and_replace", (DL_FUNC) &_BVS4GCR_find_and_replace, 3},
    {"_BVS4GCR_cpp_reachability_graph", (DL_FUNC) &_BVS4GCR_cpp_reachability_graph, 1},
    {"_BVS4GCR_cpp_ripcliques_to_jtree_zo", (DL_FUNC) &_BVS4GCR_cpp_ripcliques_to_jtree_zo, 5},
    {"_BVS4GCR_cpp_setdiff_zo", (DL_FUNC) &_BVS4GCR_cpp_setdiff_zo, 2},
    {"_BVS4GCR_cpp_union_zo", (DL_FUNC) &_BVS4GCR_cpp_union_zo, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_BVS4GCR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
